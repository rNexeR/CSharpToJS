// Using directives
using System;
using System.Linq;



// Nested namespaces
namespace X
{
    namespace A
    {
        namespace B
        {
            namespace C
            {
                using System.Console;
            }
        }
    }

    namespace D
    {
        class SomeClass
        {
            private int x;

            protected static int counter;

            protected SomeClass()
            {
                for(int i =1 ; i < 10; i++){
                    sayHello();
                }
            }

            public static void main()
            {
                EditorGUI.BeginChangeCheck();
                point = Handles.DoPositionHandle(point, handleRotation);
                if (EditorGUI.EndChangeCheck()) {
                    Undo.RecordObject(curve, "Move Point");
                    EditorUtility.SetDirty(curve);
                }
                return point;
            }

            private abstract int test(float x, bool what);


            private static int Z = 1;

            SomeClass(int a, int b)
            {
                
            }
        }

        private class AnotherClass
        {
            
        }
    }
}

namespace Y
{
    enum Test
    {
        A, B, C, D
    }

    private enum Test2
    {
        A = 1, B, C = 4,
    }
}

namespace Z
{
    namespace A
    {
        
    }
    
    public enum Test
    {
        
    }

    interface ITest : IInterface, ISomething, IDontKnow
    {
        string doSomething(string message);
        void sayHi();
        bool truthy();
        float pi();
        int sum(int a, int b);
        SomeClass hey();
    }

    interface ITest2
    {
        void what();
    }

    interface ITest3
    {

    }
}

interface Test
{
    
}

enum EnumTest
{
    
}

enum What
{
    
}

abstract class Test : SomeClass2, Hey, System.Some.Thing
{
    /*
     * Wild comment block has appeared!
     */

    private static int x, y, z;

    Test() 
    {
        
    }

    public static System.Object Function()
    {
        if(true){
            if(hola);
            int value;
            if((hola?(((5 * 9 / 3) - 7 + (2 * 7 + 4) / ( (128 >> 5 * 5) - (1 << 7 * 46) / 3 )) + 15):(((mama += " como" + (9*5))=="s")?3:6)) is int)
            {
                value = 7;
            }else{
                value = 9;
                if (look_ahead.Count > 0)
                {
                    hola(0);
                }
                else
                {
                    token = lexer.GetNextToken();
                }
            }
            switch(value)
            {
                case 9:
                    break;
                case 8:
                default:
                    break;
            }
        }else{

        }
    }

    private Test(int a, string str)
    {
        while (true)
        {
            
        }

        for (int x = 0, j = 1; true;)
        {
            break;
            continue;
        }

        foreach (int x in numbers)
        {
            break;
            continue;
        }

        int x, y, z, i;

         return nuevo.Concat(equalityOperatorOptions).Concat(relationalOperatorOptions).
            Concat(Is_AsOperatorOptions).Concat(shiftOperatorOptions).Concat(additiveOperatorOptions).
            Concat(multiplicativeOperatorOptions).Concat(assignmentOperatorOptions).Concat(unaryOperatorOptions)
            .Concat(literalOptions).ToArray();

        //Console.WriteLine("Hello!");
    }

    public static void Something()
    {
        for(;;);
        for(;;)
        {
            while(false)
            {
                var ultimatum = "adios compita";
            }
            do{

            }while(0);


            foreach(var type in types)
                if(type.Contains(token.type))
                {

                }
        }
    }

    public abstract SomethingAbstract();
}