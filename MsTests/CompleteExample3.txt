class stmtTests
{
    public static void mayBeEmpryBlock()
    {
        {
            {;;;;;;
                {
                    ;;;;;
                };;{};;;;;;
            }
        }{}{}{}{}{}{}{};;;;{}{}{}{};;{}
    }

    private static void selectionStmt()
    {
        bool hola = false;
        string mama = "adios";
        "hola"("hola");
        hola("hola");
        if(true){
            if(hola);
            int value;
            if((hola?(((5 * 9 / 3) - 7 + (2 * 7 + 4) / ( (128 >> 5 * 5) - (1 << 7 * 46) / 3 )) + 15):(((mama += " como" + (9*5))=="s")?3:6)) is int)
            {
                value = 7;
            }else{
                value = 9;
                if (look_ahead.Count > 0)
                {
                    hola(0);
                }
                else
                {
                    token = lexer.GetNextToken();
                }
            }
            switch(value)
            {
                case 9:
                    break;
                case 8:
                default:
                    break;
            }
        }else{

        }
    }

    public static void iterationStmt()
    {
        for(;;);
        for(;;)
        {
            while(false)
            {
                var ultimatum = "adios compita";
            }
            do{

            }while(0);


            foreach(var type in types)
                if(type.Contains(token.type))
                {

                }
        }
    }

    public static void statementsExpressions()
    {
        namespace1.namespace2.namespace3.MuClass nameVar = new namespace1.namespace2.namespace3.MuClass();

        varName2.edad = birthy_ear - current_year;
        varName2.sueldo *= 1.5F;
        varName2.carros.add(new Ferrarry());


        hola = "adios";

        Console.WriteLine("Hello!");


        int THREE = 3,
        FOUR = 4;


        this.myField = new Fielded(otroParam);

        this.myField3.id1 = new ID1(otroParam,otroParam2,otroParam3);


        int size = 5;
    }

    private static TokenType jumpsStmt()
    {
        
        foreach(var type in types)
        {
            if(type.Contains(token.type))
            {
                break;
            }else{
                continue;
            }
        }

        return nuevo.Concat(equalityOperatorOptions).Concat(relationalOperatorOptions).
            Concat(Is_AsOperatorOptions).Concat(shiftOperatorOptions).Concat(additiveOperatorOptions).
            Concat(multiplicativeOperatorOptions).Concat(assignmentOperatorOptions).Concat(unaryOperatorOptions)
            .Concat(literalOptions).ToArray();
    }
}