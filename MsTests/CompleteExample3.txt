class stmtTests
{
    public static void mayBeEmpryBlock()
    {
        {
            {;;;;;;
                {
                    ;;;;;
                };;{};;;;;;
            }
        }{}{}{}{}{}{}{};;;;{}{}{}{};;{}
    }

    private static void selectionStmt()
    {
        bool hola = false;
        string mama = "adios";
        if(true){
            if(hola);
            int value;
            if((hola?(((5 * 9 / 3) - 7 + (2 * 7 + 4) / ( (128 >> 5 * 5) - (1 << 7 * 46) / 3 )) + 15):(((mama += " como" + (9*5))=="s")?3:6)) is int)
            {
                value = 7;
            }else{
                value = 9;
                if (look_ahead.Count > 0)
                {
                    token = look_ahead[0];
                    //removeLookAhead(0);
                }
                else
                {
                    token = lexer.GetNextToken();
                }
            }
            switch(value)
            {
                case 9:
                    {
                        var ass = new stmtTests[,,,]{};
                    }
                    break;
                case 8:
                default:
                    break;
            }
        }else{

        }
    }

    public static void iterationStmt()
    {
        for(;;);
        for(;;)
        {
            while(false)
            {
                var ultimatum = "adios compita";
            }
            do{

            }while(0);

            //comidas.hola[7] = nada;

            foreach(var type in types)
                if(type.Contains(token.type))
                {

                }
        }
    }

    private static TokenType [] jumpsStmt()
    {
        TokenType[] nuevo = {TokenType.OP_TERNARY, TokenType.PUNT_COLON,
            TokenType.OP_NULL_COALESCING, TokenType.OP_OR,
            TokenType.OP_AND, TokenType.OP_BITWISE_OR,
            TokenType.OP_XOR, TokenType.OP_BITWISE_AND,
            TokenType.PUNT_PAREN_OPEN, TokenType.RW_NEW,
            TokenType.ID, TokenType.RW_THIS};
        
        foreach(var type in types)
        {
            if(type.Contains(token.type))
            {
                break;
            }else{
                continue;
            }
        }

        return nuevo.Concat(equalityOperatorOptions).Concat(relationalOperatorOptions).
            Concat(Is_AsOperatorOptions).Concat(shiftOperatorOptions).Concat(additiveOperatorOptions).
            Concat(multiplicativeOperatorOptions).Concat(assignmentOperatorOptions).Concat(unaryOperatorOptions)
            .Concat(literalOptions).ToArray();
    }
}